#!/bin/bash
##
## _______
## bashism
##
## -- A hackerwork for writing reusable bash scripts; An attempt to seperate function and form to script with ease.
##
## ~trevorj <[github@skywww.net]>
##
set -e
shopt -s nullglob extglob
shopt -u sourcepath

# {{{ Vars
## Defaults
[[ -n "${__BASHISM[path]}" ]] || \
    declare -A __BASHISM=( \
        [path]="${BASH_SOURCE[0]%/*}" \
        [script_self]="${0##*/}" \
        )

[[ "${#__BASHISM_CMD_PATH[@]}" -gt 0 ]] || \
    declare -A __BASHISM_CMD_PATH=([bashism]=0)

## Look for relevant cmdline args
while getopts "dqc" OPT; do case "$OPT" in
    d)	BASHISM_DEBUG=0 ;;
    q)	BASHISM_QUIET=0 ;;
    c)	BASHISM_COLORS=0 ;;
esac; done; shift $(($OPTIND - 1))

for i in debug quiet colors; do
    k="BASHISM_${i^^}"
    if [[ -n "${!k}" ]]; then
        __BASHISM[$i]="${!k}"
        #export $k="${!k}"
    fi
done
## }}}

## {{{ -> b.include(@args)
function bashism.include() {
	local i= i_path= j=; for i in "$@"; do
		i_path="${__BASHISM[path]}/bashism.d"

		for j in "$i_path/$i.sh" "$i_path/${i//./\/}.sh"; do
			if [[ -f "$j" ]]; then
				. "$j" || exit 1
				break
			fi
		done
	done
}
## }}}

## {{{ -> b.cmd($cmd, @args)
function bashism.cmd() {
	local cmd="$1"
    # If possible, remove frontal period
	[[ "${cmd:0:1}" != "." ]] || cmd="${cmd:1}"

    # Build cmd
	case "cmd" in
		b.*)		cmd="bashism.${cmd#b.}" ;;
		#this.*)	cmd="${__BASHISM[package]}.${cmd#this.}" ;;&
	esac

    # Look for cmd in cmd_path
	local i; for i in "${!__BASHISM_CMD_PATH[@]}"; do
		declare -F "$i.$cmd" >/dev/null 2>&1 || continue
		"$i.$cmd" "${@:2}"; return $?
	done

	return 127
}

b="bashism.cmd "; this="${b}this"
## }}}

## {{{ -> b.cmd_path.push(@args)
function bashism.cmd_path.push() {
	for i in "$@"; do
        __BASHISM_CMD_PATH[$i]=0
	done
}
## }}}

## {{{ Trap errors to cleanup afterwards
function bashism.on_error() {
	## Do not show remaining trace once an error has occurred
    #set +xv

	trap - INT TERM EXIT
	if declare -F 'bashism.hooks.run' >/dev/null 2>&1; then
		bashism.hooks.run on_error cleanup
	fi

	exit 1
}
trap bashism.on_error INT TERM ERR

## Disable trap then exit
function bashism.exit() {
	trap - INT TERM EXIT

	if declare -F 'bashism.output.exit' >/dev/null 2>&1; then
		bashism.output.exit ${1-0}
	fi

	builtin exit ${1-0}
}
trap bashism.exit EXIT
## }}}

## {{{ Main
$b.include util var varp output/common

## Extras
if [[ -z "$BASHISM_MINIMAL" ]]; then
    $b.include ${BASHISM_OUTPUT:-"output/logger"} hooks

    ## Run bashism hooks
    $b.hooks.run init

	## Set hooks directory from this point on to be local to the real script at hand
	$b.set hooks.path="$PWD/hooks.d"
fi
## }}}


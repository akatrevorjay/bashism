#!/bin/bash
##
## _______
## bashism
##
## -- A hackerwork for writing reusable bash scripts; An attempt to seperate function and form to script with ease.
##
## ~trevorj <[github@skywww.net]>
##

## {{{ Shell opts
set -eE
shopt -s nullglob
shopt -s extglob
## }}}

# {{{ Vars
## Defaults
[[ -n "${__BASHISM[path]}" ]]			|| \
	declare -A __BASHISM=( \
        [path]="${BASHISM_PATH:-${BASH_SOURCE[0]%/*}}" \
	)

[[ -n "${__BASHISM[cmd_path]}" ]]		|| __BASHISM[cmd_path]="bashism bashism.var bashism.util"
[[ -n "${__BASHISM[script_self]}" ]]	|| __BASHISM[script_self]="${0##*/}"

## Passthrough defaults
[[ -z "$BASHISM_DEBUG" ]]	|| __BASHISM[debug]="$BASHISM_DEBUG"
[[ -z "$BASHISM_QUIET" ]]	|| __BASHISM[quiet]="$BASHISM_QUIET"
[[ -z "$BASHISM_TRACE" ]]	|| __BASHISM[trace]="$BASHISM_TRACE"
[[ -z "$BASHISM_COLORS" ]]	|| __BASHISM[colors]="$BASHISM_COLORS"

# }}}

## {{{ Look for relevant cmdline args
while getopts "dqtc" opt; do case "$opt" in
	## Turn on extended debugging if we're debugging
	d)	__BASHISM[debug]=0 ;;
	q)	__BASHISM[quiet]=0 ;;
	## Start tracing if requested
	t)	__BASHISM[trace]=0 ;;
	c)	__BASHISM[colors]=0 ;;
esac; done; shift $((OPTIND-1)); OPTIND=1

[[ ! "${__BASHISM[debug]}" ]] || shopt -s extdebug
[[ ! "${__BASHISM[trace]}" ]] || set -xv

# }}}

## {{{ Things to look into later
##### BASH_XTRACEFD
# If  set to an integer corresponding to a valid file descriptor,
# bash will write the trace  output  generated  when  set  -x  is
# enabled to that file descriptor.  The file descriptor is closed
# when BASH_XTRACEFD is unset or assigned a new value.  Unsetting
# BASH_XTRACEFD or assigning it the empty string causes the trace
# output to be sent to the standard  error.   Note  that  setting
# BASH_XTRACEFD  to  2  (the  standard error file descriptor) and
# then unsetting it will  result  in  the  standard  error  being
# closed.
## }}}

## {{{ -> b.cmd($cmd, @args)
function bashism.cmd() {
	local cmd="$1"
	[[ "${cmd:0:1}" != "." ]] || cmd="${cmd:1}"

	case "cmd" in
		b.*)		cmd="bashism.${cmd#b.}" ;;
		#this.*)	cmd="${__BASHISM[package]}.${cmd#this.}" ;;&
	esac

	local i=; for i in '' ${__BASHISM[cmd_path]}; do
		declare -f -F "$i.$cmd" >/dev/null 2>&1 || continue
		"$i.$cmd" "${@:2}"; return $?
	done

	for i in "$cmd"; do
		i="${__BASHISM[$i]}" || continue
		[[ -n "$i" ]] || continue
		echo "$i"; return 0
	done

	return 127
}

b="bashism.cmd "; this="$b this"
## }}}

## {{{ -> b.include(@args)
function bashism.include() {
	local i= i_path= j=; for i in "$@"; do
		i_path="${__BASHISM[path]}/bashism.d"

		for j in "$i_path/$i.sh" "$i_path/${i//./\/}.sh"; do
			if [[ -f "$j" ]]; then
				. "$j" || exit 1
				break
			fi
		done
	done
}
## }}}

## {{{ -> b.cmd_path.push(@args)
function bashism.cmd_path.push() {
	for i in "$@"; do
		__BASHISM[cmd_path]="${__BASHISM[cmd_path]} $i"
	done
}
## }}}

## {{{ Trap errors to cleanup afterwards
function bashism.on_error() {
	## Do not show remaining trace once an error has occurred
	set +xv

	trap - INT TERM EXIT
	if declare -f -F 'bashism.hooks.run' >/dev/null 2>&1; then
		bashism.hooks.run on_error cleanup
	fi

	if [[ -n "$BASHISM_STDOUT_ORIGINAL" ]]; then
		exec >&-
		exec >&$BASHISM_STDERR_ORIGINAL
	fi
	if [[ -n "$BASHISM_STDOUT_ORIGINAL" ]]; then
		exec 2>&-
		exec 2>&$BASHISM_STDERR_ORIGINAL
	fi
	exec 63>&-
	wait
	sleep 2

	exit 1
}
trap bashism.on_error INT TERM EXIT

## Disable trap then exit
function bashism.exit() {
	trap - INT TERM EXIT

	if [[ -n "$BASHISM_STDOUT_ORIGINAL" ]]; then
		exec >&-
		exec >&$BASHISM_STDERR_ORIGINAL
	fi
	if [[ -n "$BASHISM_STDOUT_ORIGINAL" ]]; then
		exec 2>&-
		exec 2>&$BASHISM_STDERR_ORIGINAL
	fi
	wait
	sleep 2

	exit ${1-0}
}
## }}}

## {{{ Main
$b.include util var output/common

## Extras
if [[ -z "$BASHISM_MINIMAL" ]]; then
    $b.include output/logger hooks

    ## Run bashism hooks
    $b.hooks.run init

	## Set hooks directory from this point on to be local to the real script at hand
	$b.set hooks.path="$PWD/hooks.d"
fi
## }}}

